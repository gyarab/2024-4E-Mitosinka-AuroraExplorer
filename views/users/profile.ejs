<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    <script src="<%= GOOGLE_API_KEY %>"></script>
</head>

<body class="bg-gradient-to-b from-gray-950 via-gray-800 to-gray-950">
    <div class="fixed top-0 left-0 right-0 z-50 shadow-md">
        <%- include('../partials/header') %>
    </div>

    <div class="max-w-4xl mx-auto pt-16 px-4">
        <!-- user info section -->
        <div
            class="bg-gray-900/30 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-400/20 shadow-xl shadow-gray-950/50 p-6 mb-6">
            <h1 class="text-4xl font-bold text-white mb-4">
                <% if (profileUser) { %>
                    <%= profileUser.userName %>
                        <% } else { %>
                            <%= user.userName %>
                                <% } %>
            </h1>
            <div class="flex items-center space-x-6">
                <% if (profileUser) { %>
                    <img src="<%= profileUser.profilePicture %>" alt="Profile Picture"
                        class="w-32 h-32 rounded-full object-cover ring-2 ring-gray-500/50 shadow-lg">
                    <% } else if(user) { %>
                        <img src="<%= user.profilePicture %>" alt="Profile Picture"
                            class="w-32 h-32 rounded-full object-cover ring-2 ring-gray-500/50 shadow-lg">
                        <% } %>
                            <div class="space-y-2">
                                <p class="text-gray-300">
                                    <span class="font-medium text-gray-200">Total posts:</span>
                                    <%= userPosts.length %>
                                </p>
                                <% if (!profileUser) { %>
                                    <p class="text-gray-300">
                                        <span class="font-medium text-gray-200">Email:</span>
                                        <%= user.email %>
                                    </p>
                                    <% } %>
                                        <p class="text-gray-300">
                                            <span class="font-medium text-gray-200">Member since:</span>
                                            <%= new Date(profileUser ? profileUser.created_at :
                                                user.created_at).toLocaleDateString() %>
                                        </p>
                            </div>
            </div>

            <% if (!profileUser) { %>
                <div class="mt-8 flex space-x-4">
                    <a href="/users/edit-profile"
                        class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors duration-200 shadow-lg shadow-blue-500/20">
                        Edit Profile
                    </a>
                    <a href="/users/logout"
                        class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg transition-colors duration-200 shadow-lg shadow-red-500/20">
                        Logout
                    </a>
                </div>
                <% } %>
        </div>

        <!-- location setting (only own profile) -->
        <% if(!profileUser) { %>
            <div
                class="bg-gray-900/30 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-400/20 shadow-xl shadow-gray-950/50 p-6 mb-6">
                <h2 class="text-2xl font-bold text-white mb-4">Location Settings</h2>
                <div class="w-full h-64 bg-gray-800 rounded-lg mb-4" id="map"></div>
                <div class="flex items-center space-x-4">
                    <div class="flex-grow">
                        <label class="block text-sm font-medium text-gray-300 mb-2">Alert Radius (km)</label>
                        <input type="range" min="1" max="250" value="<%= user.alertRadius || 50 %>"
                            class="w-full bg-gray-800 accent-blue-500" id="radiusSlider">
                    </div>
                    <div class="w-16 text-center text-gray-300">
                        <span id="radiusValue">
                            <%= user.alertRadius || 50 %>
                        </span> km
                    </div>
                </div>
                <div class="flex items-center justify-between mt-4">
                    <div class="flex items-center space-x-3">
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="notificationToggle" class="sr-only peer"
                                <%=user.notificationsEnabled ? 'checked' : '' %>>
                            <div class="w-14 h-7 bg-gray-700 peer-focus:outline-none rounded-full peer 
                                peer-checked:after:translate-x-full peer-checked:after:border-white 
                                after:content-[''] after:absolute after:top-0.5 after:left-[4px] 
                                after:bg-white after:border-gray-300 after:border after:rounded-full 
                                after:h-6 after:w-6 after:transition-all peer-checked:bg-blue-600">
                            </div>
                        </label>
                        <span class="text-sm font-medium text-gray-300">
                            Email Alerts For Posts In Area
                        </span>
                    </div>
                    <button id="saveLocation"
                        class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg transition-colors duration-200 shadow-lg shadow-green-500/20">
                        Save Location
                    </button>
                </div>
            </div>
            <div
                class="bg-gray-900/30 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-400/20 shadow-xl shadow-gray-950/50 p-6 mb-6">
                <h2 class="text-2xl font-bold text-white mb-4">Aurora Alert Settings</h2>
                <div class="flex items-center space-x-3">
                    <label class="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" id="kpNotificationToggle" class="sr-only peer"
                            <%=user.notificationsForHighKp ? 'checked' : '' %>>
                        <div class="w-14 h-7 bg-gray-700 peer-focus:outline-none rounded-full peer 
                            peer-checked:after:translate-x-full peer-checked:after:border-white 
                            after:content-[''] after:absolute after:top-0.5 after:left-[4px] 
                            after:bg-white after:border-gray-300 after:border after:rounded-full 
                            after:h-6 after:w-6 after:transition-all peer-checked:bg-blue-600">
                        </div>
                    </label>
                    <span class="text-sm font-medium text-gray-300">
                        Email Alerts For High Aurora Activity (Kp â‰¥ 5)
                    </span>
                </div>
            </div>
            <% } %>

                <!-- post -->
                <div
                    class="bg-gray-900/30 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-400/20 shadow-xl shadow-gray-950/50 p-6">
                    <h2 class="text-2xl font-bold text-white mb-6">
                        <% if(!profileUser) { %>
                            My Posts
                            <% } else { %>
                                <%= profileUser.userName %>'s Posts
                                    <% } %>
                    </h2>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <% if (userPosts && userPosts.length> 0) { %>
                            <% userPosts.forEach(post=> { %>
                                <div
                                    class="bg-gray-800/50 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-700/30 shadow-lg transition-all duration-200 hover:border-gray-500/50">
                                    <img src="<%= post.imageUrl %>" alt="Aurora Post"
                                        class="w-full h-48 object-cover cursor-pointer hover:opacity-90 transition-opacity duration-200"
                                        onclick="openModal(this.src)">
                                    <div class="p-4">
                                        <% if(!profileUser) { %>
                                            <button onclick="openDeleteModal('<%= post._id %>')"
                                                class="absolute top-2 right-2 p-2 text-gray-400 hover:text-red-400 rounded-full hover:bg-gray-700/50 transition-colors">
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor"
                                                    viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round"
                                                        stroke-width="2"
                                                        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16">
                                                    </path>
                                                </svg>
                                            </button>
                                            <% } %>
                                                <p class="text-gray-300 mb-3">
                                                    <%= post.description %>
                                                </p>
                                                <div class="flex items-center space-x-4 mb-3">
                                                    <span class="flex items-center text-blue-400">
                                                        <svg class="w-5 h-5 mr-1" fill="currentColor" stroke="none"
                                                            viewBox="0 0 24 24">
                                                            <path
                                                                d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
                                                        </svg>
                                                        <%= post.likes.length %>
                                                    </span>
                                                    <span class="flex items-center text-gray-400">
                                                        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor"
                                                            viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round"
                                                                stroke-width="2"
                                                                d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z">
                                                            </path>
                                                        </svg>
                                                        <%= post.comments.length %>
                                                    </span>
                                                </div>
                                                <div class="location-display text-sm text-gray-400"
                                                    data-lat="<%= post.location.latitude %>"
                                                    data-lng="<%= post.location.longitude %>">
                                                    <svg class="inline w-4 h-4 mr-1" fill="none" stroke="currentColor"
                                                        viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round"
                                                            stroke-width="2"
                                                            d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z">
                                                        </path>
                                                        <path stroke-linecap="round" stroke-linejoin="round"
                                                            stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z">
                                                        </path>
                                                    </svg>
                                                    <span class="location-text">Loading location...</span>
                                                </div>
                                    </div>
                                </div>
                                <% }); %>
                                    <% } else { %>
                                        <p class="text-gray-400 col-span-2 text-center py-8">No posts yet. Share your
                                            first aurora sighting!</p>
                                        <% } %>
                    </div>
                </div>
    </div>

    <!-- image modals -->
    <div id="imageModal" class="hidden fixed inset-0 w-full h-full bg-gray-950/90 backdrop-blur-md z-50 cursor-pointer">
        <button
            class="absolute top-5 right-8 text-white text-4xl font-bold hover:text-gray-300 transition-colors">&times;</button>
        <img id="modalImage"
            class="max-w-[90%] max-h-[90vh] m-auto absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 object-contain rounded-lg shadow-2xl">
    </div>

    <!--delete modal-->
    <div id="deleteModal" class="hidden fixed inset-0 bg-gray-950/80 backdrop-blur-sm z-50">
        <div class="bg-gray-900 rounded-xl w-96 mx-auto mt-20 p-6 border border-gray-800/50 shadow-xl">
            <h3 class="text-lg font-semibold mb-4 text-gray-200">Delete Post</h3>
            <p class="text-gray-400 mb-6">Are you sure you want to delete this post? This action cannot be undone.</p>
            <div class="flex justify-end gap-3">
                <button onclick="closeDeleteModal()"
                    class="px-4 py-2 bg-gray-800 hover:bg-gray-700 text-gray-200 rounded-lg transition-colors">Cancel</button>
                <button id="confirmDelete"
                    class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors">Delete</button>
            </div>
        </div>
    </div>

    <script>
        //delete post modal
        let postIdToDelete = null;

        function openDeleteModal(postId) {
            postIdToDelete = postId;
            document.getElementById('deleteModal').classList.remove('hidden');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
            postIdToDelete = null;
        }
        //delete post  
        document.getElementById('confirmDelete').addEventListener('click', async () => {

            if (!postIdToDelete) return;

            try {
                const response = await fetch(`/aurorex/${postIdToDelete}`, {
                    method: 'DELETE'
                });
                if (response.ok) {
                    window.location.reload(); // reload page to display changes
                } else {
                    console.error('Failed to delete post:', response.statusText);
                }
            } catch (error) {
                console.error('Error:', error);
            }
            closeDeleteModal();
        });

        // close modal on outside click
        document.getElementById('deleteModal').addEventListener('click', (e) => {
            if (e.target === e.currentTarget) {
                closeDeleteModal();
            }
        });

        // close on escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeDeleteModal();
            }
        });

        //image modal
        const modal = document.getElementById('imageModal');
        const modalImg = document.getElementById('modalImage');
        const closeButton = modal.querySelector('button');

        function openModal(imgSrc) {
            modal.classList.remove('hidden');
            modalImg.src = imgSrc;
            document.body.classList.add('overflow-hidden');
        }

        function closeModal() {
            modal.classList.add('hidden');
            document.body.classList.remove('overflow-hidden');
        }

        closeButton.onclick = closeModal;
        modal.onclick = function (e) {
            if (e.target === modal) {
                closeModal();
            }
        }

        document.addEventListener('keydown', function (e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        });


        // toggle notifications on/off
        const notificationToggle = document.getElementById('notificationToggle');
        if (notificationToggle) {  // only add event listener if element exists, otherwise location wont get loaded :(
            notificationToggle.addEventListener('change', async function () {
                try {
                    const response = await fetch('/users/toggle-notifications', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                    }
                } catch (error) {
                    console.error('Error:', error);
                    // revert the toggle if there was an error
                    this.checked = !this.checked;
                    alert('Error updating notification settings');
                }
            });
        }

        //toggle high kp notifications on/off
        const kpNotificationToggle = document.getElementById('kpNotificationToggle');
        if (kpNotificationToggle) {
            kpNotificationToggle.addEventListener('change', async function () {
                try {
                    const response = await fetch('/users/toggle-kp-notifications', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to update KP notification settings');
                    }

                } catch (error) {
                    console.error('Error:', error);
                    // revert the toggle if there was an error
                    this.checked = !this.checked;
                    alert('Error updating KP notification settings');
                }
            });
        }
        // initialize google map
        function initMap() {

            const defaultLocation = {
                lat: <%= user.location?.latitude || 49.894634 %>,
                lng: <%= user.location?.longitude || 15.367455 %> 
                    };


            map = new google.maps.Map(document.getElementById('map'), {
                center: defaultLocation,
                zoom: 6,
                styles: [
                    { elementType: "geometry", stylers: [{ color: "#242f3e" }] },
                    { elementType: "labels.text.stroke", stylers: [{ color: "#242f3e" }] },
                    { elementType: "labels.text.fill", stylers: [{ color: "#746855" }] },
                    {
                        featureType: "administrative.locality",
                        elementType: "labels.text.fill",
                        stylers: [{ color: "#d59563" }],
                    },
                    {
                        featureType: "water",
                        elementType: "geometry",
                        stylers: [{ color: "#17263c" }],
                    },
                    {
                        featureType: "water",
                        elementType: "labels.text.fill",
                        stylers: [{ color: "#515c6d" }],
                    },
                ],
            });;

            // create circle for radius
            const circle = new google.maps.Circle({
                map: map,
                center: defaultLocation,
                radius: <%= user.alertRadius || 50 %> * 1000, // convert km to meters
                fillColor: '#4299e1',
                fillOpacity: 0.2,
                strokeColor: '#4299e1',
                strokeWeight: 2,
                editable: true,
                draggable: true
            });

            // update radius value when slider changes
            const radiusSlider = document.getElementById('radiusSlider');
            const radiusValue = document.getElementById('radiusValue');

            radiusSlider.addEventListener('input', function () {
                const radius = parseInt(this.value);
                radiusValue.textContent = radius;
                circle.setRadius(radius * 1000);
            });

            // save location preferences
            document.getElementById('saveLocation').addEventListener('click', async function () {
                const center = circle.getCenter();
                const radius = circle.getRadius() / 1000; // convert meters to km

                try {
                    const response = await fetch('/users/update-location', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            latitude: center.lat(),
                            longitude: center.lng(),
                            alertRadius: radius
                        })
                    });


                } catch (error) {
                    alert('Error saving location preferences: ' + error.message);
                }
            });
        }


        // convert coordinates to address
        function geocodeLocations() {
            const geocoder = new google.maps.Geocoder();
            const locationDisplays = document.querySelectorAll('.location-display');

            locationDisplays.forEach(display => {
                // parse the latitude and longitude
                const lat = parseFloat(display.dataset.lat);
                const lng = parseFloat(display.dataset.lng);
                const locationText = display.querySelector('.location-text');

                // use the geocoder to convert the latitude and longitude to address
                geocoder.geocode({ location: { lat, lng } }, (results, status) => {
                    if (status === 'OK' && results[0]) {
                        locationText.textContent = results[0].formatted_address;
                    } else {
                        locationText.textContent = `${lat.toFixed(2)}, ${lng.toFixed(2)}`;
                    }
                });
            });
        }
        //load functions once page is openned
        window.onload = function () {
            geocodeLocations();
            initMap();

        };
    </script>
</body>

</html>