<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Forecast</title>
  <link rel="stylesheet" href="/css/style.css" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>

  <%- include('partials/header') %>

    <div class="min-h-screen bg-gray-800 flex flex-col items-center justify-center text-white">
      <main class="container mx-auto p-4 md:w-3/5 w-full">
        <h2 class="hidden md:block text-4xl md:text-6xl font-bold mb-4 text-center">Aurora Forecast</h2>

        <div class="flex flex-col items-center justify-center space-y-6">

          <!-- kp index chart -->
          <div class="w-full max-w-3xl bg-gray-800 rounded-lg shadow-lg p-6 md:p-8 mb-6 relative">

            
            <h3 class="text-2xl md:text-3xl font-bold text-center text-white mb-4 md:mb-6">Kp Index Forecast</h3>
            <div class="flex justify-center items-center bg-gray-700 p-4 md:p-6 rounded-lg shadow-inner">
              <canvas id="kpChart" class="w-full max-w-xs md:max-w-lg h-64 sm:h-80 md:h-64"></canvas>
            </div>
          </div>

          <!-- Aurora Map -->
          <div class="w-full max-w-3xl bg-gray-800 rounded shadow-lg p-4 md:p-6">
            <h3 class="text-xl md:text-2xl font-bold mb-2 text-center">Tonight's Aurora Map</h3>
            <div class="overflow-hidden rounded-lg shadow-md max-w-full h-[712px] mx-auto relative">
              <img id="aurora-map-forecast"
                src="https://services.swpc.noaa.gov/experimental/images/aurora_dashboard/tonights_static_viewline_forecast.png"
                alt="Aurora Forecast" class="absolute top-[-85px] w-full">

              <div class="absolute top-2 right-2 group">

                <div
                  class="w-6 h-6 bg-gray-700 text-white text-center font-bold rounded-full flex items-center justify-center cursor-pointer">
                  i
                </div>

                <div
                  class="absolute hidden group-hover:flex bg-gray-800 text-white text-sm rounded-md px-3 py-2 w-52 top-full mt-2 right-0 shadow-lg transition-opacity duration-200 z-10">
                  <span>Source: </span>
                  <a href="https://services.swpc.noaa.gov/experimental/images/aurora_dashboard/tonights_static_viewline_forecast.png"
                    class="underline text-blue-400 ml-1" target="_blank">
                    NOAA Aurora Dashboard
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>

    <script>
      //refresh picture automatically
      document.addEventListener('DOMContentLoaded', () => {
        const auroraImg = document.getElementById('aurora-map-forecast');
        const baseUrl = "https://services.swpc.noaa.gov/experimental/images/aurora_dashboard/tonights_static_viewline_forecast.png";


        const refreshImage = () => {
          auroraImg.src = `${baseUrl}?timestamp=${new Date().getTime()}`;
        };


        setInterval(refreshImage, 600000);
      });

    </script>

    <script>
      async function fetchKpForecast() {
        try {
          const response = await fetch('https://services.swpc.noaa.gov/text/3-day-forecast.txt');
          if (!response.ok) {
            throw new Error('Network connection was not established');
          }
          const textData = await response.text();
          const lines = textData.split('\n');
          const timeKpMap = {};

          for (const line of lines) {
            if (line.includes('NOAA Kp index breakdown')) continue;
            const match = line.match(/(\d{2}-\d{2}UT)\s+([\d.]+)/);
            if (match) {
              const time = match[1].trim();
              const kpIndex = Math.round(parseFloat(match[2].trim()));
              timeKpMap[time.slice(0, -2)] = kpIndex;
            }
          }
          renderChart(timeKpMap);

        } catch (error) {
          console.error('Error fetching Kp forecast data:', error);
        }
      }

      function getColor(kpIndex) {
        if (kpIndex <= 3) return 'rgba(0, 255, 0, 0.8)';
        if (kpIndex == 4) return 'rgba(255, 255, 0, 0.8)';
        if (kpIndex <= 6) return 'rgba(255, 165, 0, 0.8)';
        if (kpIndex <= 9) return 'rgba(255, 0, 0, 0.8)';
        return 'rgba(0, 0, 0, 0.8)';
      }

      function renderChart(timeKpMap) {
        const ctx = document.getElementById('kpChart').getContext('2d');
        const labels = Object.keys(timeKpMap);
        const data = Object.values(timeKpMap);
        const backgroundColors = data.map(kpIndex => getColor(kpIndex));

        const myChart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Kp Index',
              data: data,
              backgroundColor: backgroundColors,
              borderColor: backgroundColors,
              borderWidth: 1
            }]
          },
          options: {
            plugins: {
              legend: {
                display: false,
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                max: 9,
                title: {
                  display: true,
                  text: 'Kp Index'
                }
              },
              x: {
                title: {
                  display: true,
                  text: 'Time (UTC)'
                }
              }
            }
          }
        });
      }

      document.addEventListener('DOMContentLoaded', () => {
        fetchKpForecast();
      });
    </script>
</body>

</html>
