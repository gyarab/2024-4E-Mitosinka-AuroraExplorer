<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Aurorex</title>
  <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="<%=GOOGLE_API_KEY%>"></script>
  <script>
    const user = <%- JSON.stringify(user) %>;
  </script>
</head>

<body class="bg-gradient-to-b from-gray-950 via-gray-900 to-gray-950">
  <div class="fixed top-0 left-0 right-0 z-50 shadow-md">
    <%- include('../partials/header') %>
  </div>

  <nav class="bg-gradient-to-b from-gray-800/50 to-transparent backdrop-blur-sm shadow-md border-gray-700/30 mb-6 pt-16">
    <div class="container mx-auto px-6 py-3">
      <div class="flex justify-between items-center">
        <h1 class=" text-white text-2xl font-bold">Aurorex</h1>
        <a href="/aurorex/post" class="bg-blue-500 text-white px-4 py-2 rounded-lg">Create Post</a>
      </div>
    </div>
  </nav>

  <div class="container mx-auto px-4 py-8 border-white">
    <div id="posts-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- posts will be loaded here -->
    </div>
    <div id="no-posts" class="text-center py-12 hidden">
      <p class="text-gray-400">No posts yet. Be the first to share your aurora sighting!</p>
    </div>
    <div id="loading-spinner" class="text-center py-4">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent"></div>
    </div>
  </div>

  <!-- delete modal -->
  <div id="deleteModal" class="hidden fixed inset-0 bg-gray-950/80 backdrop-blur-sm z-50">
    <div class="bg-gray-900 rounded-xl w-96 mx-auto mt-20 p-6 border border-gray-800/50 shadow-xl">
      <h3 class="text-lg font-semibold mb-4 text-gray-200">Delete Comment</h3>
      <p class="text-gray-400 mb-6">Are you sure you want to delete this comment? This action cannot be undone.</p>
      <div class="flex justify-end gap-3">
        <button onclick="closeDeleteModal()" class="px-4 py-2 bg-gray-800 hover:bg-gray-700 text-gray-200 rounded-lg transition-colors">Cancel</button>
        <button id="confirmDelete" class="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors">Delete</button>
      </div>
    </div>
  </div>

  <!-- image modal -->
  <div id="imageModal" class="hidden fixed inset-0 w-full h-full bg-gray-950/90 backdrop-blur-md z-50 cursor-pointer">
    <button class="absolute top-5 right-8 text-white text-4xl font-bold hover:text-gray-300 transition-colors">&times;</button>
    <img id="modalImage" class="max-w-[90%] max-h-[90vh] m-auto absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 object-contain rounded-lg shadow-2xl">
  </div>

  <script>
    // modal functions
    function openDeleteModal(postId, commentId) {
      currentPostId = postId;
      currentCommentId = commentId;
      document.getElementById('deleteModal').classList.remove('hidden');
    }

    function closeDeleteModal() {
      document.getElementById('deleteModal').classList.add('hidden');
    }

    function openModal(imgSrc) {
      const modal = document.getElementById('imageModal');
      const modalImg = document.getElementById('modalImage');
      modal.classList.remove('hidden');
      modalImg.src = imgSrc;
      document.body.classList.add('overflow-hidden');
    }

    function closeModal() {
      const modal = document.getElementById('imageModal');
      modal.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }

    //geocoder function(convneret lat and lng to location)
    function geocoder() {
      const geocoder = new google.maps.Geocoder();
      const locationDisplays = document.querySelectorAll('.location-display');

      locationDisplays.forEach(display => {
        const lat = parseFloat(display.dataset.lat);
        const lng = parseFloat(display.dataset.lng);
        const locationText = display.querySelector('.location-text');

        geocoder.geocode({ location: { lat, lng } }, (results, status) => {
          if (status === 'OK' && results[0]) {
            const address = results[0].formatted_address;
            locationText.textContent = address;
          } else {
            locationText.textContent = `${lat.toFixed(2)}, ${lng.toFixed(2)}`;
          }
        });
      });
    }

    // create one post HTML 
    function createPostElement(post) {
      //HTML for comments
      const commentsHtml = post.comments.map(comment => {
        // get IDs, handling both string and object ID cases
        const commentUserId = comment.userId._id ? comment.userId._id.toString() : comment.userId.toString();
        const postUserId = post.userId._id ? post.userId._id.toString() : post.userId.toString();
        const currentUserId = user._id ? user._id.toString() : user.id.toString();

        // Check if user can delete the comment
        const canDelete = commentUserId === currentUserId || postUserId === currentUserId;

        //HTML structure for each comment
        return `
          <div class="mb-2 pb-2 border-b border-gray-800/30 last:border-b-0">
            <div class="flex items-center justify-between mb-1">
              <div class="flex items-center">
                <img src="${comment.userId.profilePicture || '/images/default-avatar.png'}"
                  alt="Commenter" class="w-6 h-6 rounded-full object-cover mr-2">
                <span class="font-medium text-sm text-gray-300">
                  ${comment.userId.userName}
                </span>
              </div>
              ${canDelete ? `
                <button onclick="openDeleteModal('${post._id}', '${comment._id}')"
                  class="text-red-400 hover:text-red-300 transition-colors">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              ` : ''}
            </div>
            <p class="text-sm text-gray-300 ml-8">${comment.text}</p>
            <p class="text-xs text-gray-500 ml-8">${new Date(comment.timestamp).toLocaleString()}</p>
          </div>
        `;
      }).join('');

      return `
        <div class="bg-gray-900/30 backdrop-blur-sm rounded-xl overflow-hidden border border-gray-500/20 shadow-xl shadow-gray-950/50 hover:border-gray-300/50 transition-colors duration-200">
          <div class="p-4 border-b border-gray-800/30 flex items-center">
            <a href="/users/profile/${post.userId._id}">
              <img src="${post.userId.profilePicture}" alt="Profile Picture" 
                class="w-10 h-10 rounded-full object-cover mr-3 ring-2 ring-gray-800">
            </a>
            <div>
              <a href="/users/profile/${post.userId._id}" 
                class="font-semibold text-gray-200 hover:text-blue-400 transition-colors">
                ${post.userId.userName}
              </a>
              <div class="location-display text-sm text-gray-400" 
                data-lat="${post.location.latitude}" 
                data-lng="${post.location.longitude}">
                <svg class="inline w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                <span class="location-text">Loading location...</span>
              </div>
            </div>
          </div>

          <img src="${post.imageUrl}" alt="Aurora Post" 
            class="w-full h-64 object-cover cursor-pointer hover:opacity-90 transition-opacity duration-200" 
            onclick="openModal(this.src)">

          <div class="p-4">
            <p class="text-sm text-gray-400 mb-4">Posted: ${new Date(post.timestamp).toLocaleString()}</p>
            <p class="text-gray-300 mb-4">${post.description}</p>

            <div class="flex items-center mb-4">
              <form action="/aurorex/${post._id}/like" method="POST" class="mr-4">
                <button type="submit" 
                  class="flex items-center ${post.likes.some(like => like.userId.toString() === user.id) ? 
                    'text-blue-400 hover:text-blue-300' : 'text-gray-400 hover:text-blue-400'} transition-colors">
                  <svg class="w-5 h-5 mr-1" fill="${post.likes.some(like => like.userId.toString() === user.id) ? 
                    'currentColor' : 'none'}" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  </svg>
                  ${post.likes.length}
                </button>
              </form>
              <span class="text-gray-400">
                <svg class="w-5 h-5 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
                ${post.comments.length}
              </span>
            </div>

            <div class="border-t border-gray-800/30 pt-4">
              <h3 class="font-medium text-gray-200 mb-2">Comments</h3>
              <div class="max-h-40 overflow-y-auto">
                ${commentsHtml}
              </div>

              <form action="/aurorex/${post._id}/comment" method="POST" class="mt-4">
                <div class="flex">
                  <input type="text" name="text" 
                    class="flex-grow px-3 py-2 bg-gray-800/50 border border-gray-700/50 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500/50 text-gray-300 placeholder-gray-500"
                    placeholder="Add a comment..." required>
                  <button type="submit" 
                    class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-r-lg transition-colors duration-200 shadow-lg shadow-blue-500/20">
                    Post
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      `;
    }

    // post loading 
    let page = 1; //current page
    let loading = false; //variable to prevent multiple loadings in one time
    let hasMore = true; // variable to check if more posts are aviable
    //get html elements
    const postsContainer = document.getElementById('posts-container');
    const loadingSpinner = document.getElementById('loading-spinner');
    const noPostsMessage = document.getElementById('no-posts');

    //load posts with infinite scroll
    async function loadMorePosts() {
      //prevent loading if loading in progress or no more posts
      if (loading || !hasMore) return;

      //set loading state
      loading = true;
      loadingSpinner.classList.remove('hidden');

      try {
        //get next pack of posts
        const response = await fetch(`/aurorex/api/posts?page=${page}&limit=6`);
        const data = await response.json();

        //no more posts aviable
        if (data.posts.length === 0) {
          hasMore = false;
          if (page === 1) {
            //show no posts msg if no posts on first page
            noPostsMessage.classList.remove('hidden');
          }
          loadingSpinner.classList.add('hidden');
          return;
        }

        //add new posts to container
        data.posts.forEach(post => {
          const postElement = createPostElement(post);
          postsContainer.insertAdjacentHTML('beforeend', postElement);
        });

        //update location for posts
        geocoder();
        //page number and update hasMore variable
        page++;
        hasMore = data.hasMore;
      } catch (error) {
        console.error('Error loading posts:', error);
      } finally {
        //reset loading state
        loading = false;
        loadingSpinner.classList.add('hidden');
      }
    }

    // scroll handler
    let scrollTimeout;
    //scrp;; evemt ;ostemer
    window.addEventListener('scroll', () => {
      //clear any existing timeout to prevent scroll bouncing
      clearTimeout(scrollTimeout);

      //settimeout to execute after 100ms after scroll
      scrollTimeout = setTimeout(() => {
        //check if user is near bottom of page, trigger 100px before reaching bottom
        if ((window.innerHeight + window.scrollY) >= document.documentElement.scrollHeight - 100) {
          //load more posts
          loadMorePosts();
        }
      }, 100); //100ms delay to prevent bouncing
    });

    // initial load
    document.addEventListener('DOMContentLoaded', () => {
      loadMorePosts();

      // set up modals
      const imageModal = document.getElementById('imageModal');
      const closeButton = imageModal.querySelector('button');

      closeButton.onclick = closeModal;
      imageModal.onclick = (e) => {
        if (e.target === imageModal) closeModal();
      };

      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeModal();
          closeDeleteModal();
        }
      });

      // set up delete comment functionality
      document.getElementById('confirmDelete').addEventListener('click', async () => {
        try {
          const response = await fetch(`/aurorex/${currentPostId}/comment/${currentCommentId}/delete`, {
            method: 'DELETE'
          });

          if (response.ok) {
            window.location.reload();
          } else {
            alert('Failed to delete comment');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to delete comment');
        }
      });
    });
  </script>
</body>

</html>